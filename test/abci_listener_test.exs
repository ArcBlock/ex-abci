defmodule ExAbciTest.Listener do
  @moduledoc false
  use ExUnit.Case
  alias ExAbci.Listener

  test "shall decode messages" do
    messages = [
      %{
        data: <<38, 34, 17, 10, 15, 48, 46, 50, 53, 46, 48, 45, 48, 99, 57, 99, 51, 50, 57, 50>>,
        type: :info,
        assert_fn: fn data -> assert data.version === "0.25.0-0c9c3292" end
      },
      %{
        data: <<4, 26, 0>>,
        type: :flush
      },
      %{
        data:
          <<200, 1, 50, 98, 10, 12, 8, 140, 217, 153, 222, 5, 16, 168, 182, 222, 148, 2, 18, 7,
            116, 121, 114, 99, 104, 101, 110, 26, 24, 10, 16, 8, 128, 128, 192, 10, 16, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 1, 18, 4, 8, 160, 141, 6, 34, 47, 10, 43, 10, 7,
            101, 100, 50, 53, 53, 49, 57, 18, 32, 149, 106, 151, 42, 206, 12, 194, 244, 100, 245,
            117, 40, 247, 138, 51, 50, 223, 237, 162, 0, 248, 173, 90, 213, 52, 224, 74, 31, 48,
            140, 59, 216, 16, 10>>,
        type: :init_chain,
        assert_fn: fn data ->
          assert data.chain_id === "tyrchen"
          assert data.app_state_bytes === ""
        end
      },
      %{
        data:
          <<158, 4, 66, 140, 2, 10, 20, 237, 51, 158, 96, 122, 86, 64, 104, 14, 56, 96, 12, 0,
            134, 54, 163, 69, 225, 119, 164, 18, 211, 1, 10, 7, 116, 121, 114, 99, 104, 101, 110,
            16, 5, 26, 12, 8, 178, 195, 181, 222, 5, 16, 192, 251, 160, 174, 2, 32, 1, 40, 4, 50,
            48, 10, 20, 171, 59, 183, 91, 111, 167, 181, 221, 67, 209, 231, 115, 13, 98, 136, 32,
            6, 207, 202, 81, 18, 24, 8, 1, 18, 20, 42, 2, 206, 178, 184, 39, 105, 167, 42, 127,
            50, 190, 71, 70, 154, 129, 89, 215, 195, 16, 58, 20, 245, 26, 198, 148, 4, 135, 4,
            221, 206, 224, 7, 32, 191, 168, 69, 192, 92, 247, 70, 122, 66, 20, 165, 165, 17, 236,
            88, 153, 202, 218, 189, 196, 226, 187, 239, 177, 6, 231, 49, 199, 24, 210, 74, 20, 64,
            179, 141, 214, 51, 26, 169, 47, 25, 66, 149, 174, 97, 62, 19, 16, 157, 11, 1, 155, 90,
            20, 14, 82, 10, 243, 13, 71, 190, 40, 242, 147, 224, 64, 228, 24, 208, 54, 27, 251,
            83, 112, 106, 20, 17, 1, 96, 200, 116, 127, 208, 125, 168, 119, 136, 181, 85, 17, 239,
            8, 71, 249, 140, 20, 122, 20, 206, 146, 88, 0, 220, 31, 58, 247, 39, 33, 52, 58, 15,
            230, 127, 24, 41, 22, 50, 247, 26, 30, 18, 28, 10, 24, 10, 20, 206, 146, 88, 0, 220,
            31, 58, 247, 39, 33, 52, 58, 15, 230, 127, 24, 41, 22, 50, 247, 24, 10, 16, 1>>,
        type: :begin_block,
        assert_fn: fn data ->
          assert data.hash ===
                   Base.decode16!("ed339e607a5640680e38600c008636a345e177a4", case: :lower)

          assert data.header.chain_id === "tyrchen"
          assert data.header.height === 5
          assert data.header.num_txs === 1
          assert data.header.total_txs === 4
        end
      },
      %{
        data: <<22, 154, 1, 8, 10, 6, 97, 98, 99, 100, 101, 103>>,
        type: :deliver_tx,
        assert_fn: fn data -> assert data.tx === "abcdeg" end
      },
      %{
        data: <<8, 90, 2, 8, 5>>,
        type: :end_block,
        assert_fn: fn data -> assert data.height === 5 end
      },
      %{
        data: <<4, 98, 0>>,
        type: :commit
      }
    ]

    Enum.map(messages, fn %{data: data, type: type} = msg ->
      {[request], ""} = Listener.unpack_requests(data)
      assert %Abci.Request{value: {^type, req}} = request

      case Map.get(msg, :assert_fn, nil) do
        nil -> :ok
        assert_fn -> assert_fn.(req)
      end
    end)
  end
end
